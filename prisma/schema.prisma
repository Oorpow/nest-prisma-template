// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int            @id @default(autoincrement())
  username String         @unique
  password String
  nickname String         @default("")
  email    String         @unique
  /// 账号是否被冻结
  isFrozen Boolean        @default(false) @map("is_frozen")
  isAdmin  Boolean        @default(false) @map("is_admin")
  roles    User_To_Role[]
}

model Permission {
  id    Int                  @id @default(autoincrement())
  /// 权限
  name  String
  desc  String
  roles Role_To_Permission[]
}

model Role {
  id          Int                  @id @default(autoincrement())
  /// 角色名称
  name        String
  users       User_To_Role[]
  permissions Role_To_Permission[]
}

model User_To_Role {
  user   User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId Int
  role   Role @relation(fields: [roleId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  roleId Int

  @@id([userId, roleId])
}

model Role_To_Permission {
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       Int
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId Int

  @@id([roleId, permissionId])
}

/// 会议室表
// model Meeting_Room {
//   id          Int      @id @default(autoincrement())
//   name        String
//   /// 会议室容量
//   capacity    Int
//   location    String
//   equipment   String
//   description String
//   isBooked    Boolean  @default(false)
//   createdAt   DateTime @default(dbgenerated("NOW()")) @map("created_at") @db.DateTime
//   updatedAt   DateTime @updatedAt @map("updated_at")
// }

/// 预订表
// model Booking {
//   id        Int      @id @default(autoincrement())
//   userId    Int      @map("user_id")
//   roomId    Int      @map("room_id")
//   startTime DateTime @default(dbgenerated("NOW()")) @map("start_time") @db.DateTime
//   endTime DateTime @default(dbgenerated("NOW()")) @map("")
// }

// model Category {
//   id    Int                 @id @default(autoincrement())
//   name  String
//   posts CategoriesOnPosts[]
// }

// // 中间表（category - post）
// model CategoriesOnPosts {
//   post       Post     @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
//   postId     Int
//   category   Category @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
//   categoryId Int
//   assignedAt DateTime @default(dbgenerated("NOW()")) @map("assigned_at") @db.DateTime
//   assignedBy String   @map("assigned_by")

//   @@id([postId, categoryId])
// }
